#+TITLE: Config
#+STARTUP: folded
#+PROPERTY: header-args :tangle ./config.el

* Personal info

Some personal information.

#+begin_src emacs-lisp
(setq user-full-name "Andr√© Rodrigues"
      user-mail-address "rodrigues.am@usp.br")
#+end_src

* Global Variables

#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/.script/elisp")
;; (require 'amr.el)

(use-package use-package-quelpa
  :defer t)
#+end_src

* Pass

#+begin_src emacs-lisp
(use-package auth-source
  :ensure t
  :custom
  (auth-sources  '("~/sync/pessoal/security/.authinfo-amr")))
#+end_src

* Bookmarks

#+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src

* Dired

#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

* Grammarly

#+begin_src emacs-lisp
(use-package lsp-grammarly
  :ensure t
  ;; :hook ((text-mode org-mode) . (lambda ()
  ;;                       (require 'lsp-grammarly)
  ;;                       (lsp)))
  ) ; or lsp-deferred
#+end_src

#+begin_src emacs-lisp
(use-package grammarly
  :ensure t)
#+end_src
* SpellCheck

#+begin_src emacs-lisp :tangle t
(remove-hook 'text-mode-hook #'spell-fu-mode)
#+end_src
#+begin_src emacs-lisp
(use-package flyspell
  :defer t
  :config
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

  (dolist (mode '(
                  ;;org-mode-hook
                  mu4e-compose-mode-hook))
    (add-hook mode (lambda () (flyspell-mode 1)))))
#+end_src

* TODO Writeroom

#+begin_src emacs-lisp :tangle no
(use-package writeroom-mode
  :defer t
  :config
  (setq writeroom-maximize-window nil
        writeroom-mode-line t
        writeroom-global-effects nil ;; No need to have Writeroom do any of that silly stuff
        writeroom-extra-line-spacing 3)
  (setq writeroom-width visual-fill-column-width))
#+end_src

* Social network

** Telegram Client

#+begin_src emacs-lisp
(use-package telega
  :defer t)
#+end_src

** TODO Ement - Matrix Client

#+begin_src emacs-lisp :tangle no
(use-package ement
  :quelpa (ement :fetcher github :repo "alphapapa/ement.el"))
#+end_src

** Matodon

#+begin_src emacs-lisp
(use-package mastodon
  :defer t
  :config
  (setq mastodon-instance-url "https://mastodon.social"
  mastodon-active-user "rodrigues_am"))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package mastodon-alt
  :ensure t)
#+end_src

* ChatGPT


** Chatgpt-shell
#+begin_src emacs-lisp
(use-package shell-maker
  :ensure t)

(use-package chatgpt-shell
  :requires shell-maker
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package gptel
  :ensure t)
#+end_src

* Org-mode

#+begin_src emacs-lisp
(use-package org
  :defer t
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :config
  (setq org-directory "~/notas")
  :custom
  (setq-local fill-column 110)
  :hook
  (org-mode . auto-fill-mode))

#+end_src

#+RESULTS:
: ((\.org$ . org-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (Procfile\' . yaml-mode) (templates/.+\.php\' . web-mode) (wp-content/themes/.+/.+\.php\' . web-mode) (\.eco\' . web-mode) (\.jinja2?\' . web-mode) (\.twig\' . web-mode) (\.svelte\' . web-mode) (\.mustache\' . web-mode) (\.hbs\' . web-mode) (\.ejs\' . web-mode) (\.as[cp]x\' . web-mode) (\.jsp\' . web-mode) (\.[lh]?eex\' . web-mode) (\.erb\' . web-mode) (\.\(?:tpl\|blade\)\(?:\.php\)?\' . web-mode) (\.[px]?html?\' . web-mode) (/bspwmrc\' . sh-mode) (\.\(?:zunit\|env\)\' . sh-mode) (\.bats\' . sh-mode) (\.rs$ . rustic-mode) (/Pipfile\' . conf-mode) ([./]flake8\' . conf-mode) (/flake\.lock\' . json-mode) (/README\(?:\.md\)?\' . gfm-mode) (\.tex\' . LaTeX-mode) (\.tsx\' . typescript-tsx-mode) (\.pac\' . rjsx-mode) (\.es6\' . rjsx-mode) (\.[mc]?js\' . rjsx-mode) (\.js\(?:on\|[hl]int\(?:rc\)?\)\' . json-mode) (\.jl\' . ess-julia-mode) (\.Cask\' . emacs-lisp-mode) (\.h\' . +cc-c-c++-objc-mode) (\.mm\' . objc-mode) (\.pdf\' . pdf-view-mode) (\.nw\' . poly-noweb-mode) (\.md\' . poly-markdown-mode) (\.rs\' . rust-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.styl\' . stylus-mode) (\.sass\' . sass-mode) (\.slim\' . slim-mode) (\.\(?:jade\|pug\)\' . pug-mode) (\.haml\' . haml-mode) (\.rs\' . rustic-mode) (requirements\.in . pip-requirements-mode) (requirements[^z-a]*\.txt\' . pip-requirements-mode) (\.pip\' . pip-requirements-mode) (\.\(plantuml\|pum\|plu\)\' . plantuml-mode) (\.gp\' . gnuplot-mode) (\.gnuplot\' . gnuplot-mode) (\.nix\' . nix-mode) (\flake.lock\' . js-mode) (^/nix/store/.+\.drv\' . nix-drv-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.hva\' . latex-mode) (\.tsx?\' . typescript-mode) (\.jsx\' . rjsx-mode) (\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\'\) . json-mode) (\.cpp[rR]\' . poly-c++r-mode) (\.[Rr]cpp\' . poly-r+c++-mode) (\.[rR]brew\' . poly-brew+r-mode) (\.[rR]html\' . poly-html+r-mode) (\.rapport\' . poly-rapport-mode) (\.[rR]md\' . poly-markdown+r-mode) (\.[rR]nw\' . poly-noweb+r-mode) (\.Snw\' . poly-noweb+r-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout\' . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION\' . conf-colon-mode) (/Makevars\(\.win\)?\' . makefile-mode) (\.[Rr]out\' . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.glsl\' . glsl-mode) (\.geom\' . glsl-mode) (\.frag\' . glsl-mode) (\.vert\' . glsl-mode) (\.cuh\' . cuda-mode) (\.cu\' . cuda-mode) (\.cmake\' . cmake-mode) (CMakeLists\.txt\' . cmake-mode) (/git-rebase-todo\' . git-rebase-mode) (/git/ignore\' . gitignore-mode) (/info/exclude\' . gitignore-mode) (/\.gitignore\' . gitignore-mode) (/etc/gitconfig\' . gitconfig-mode) (/\.gitmodules\' . gitconfig-mode) (/git/config\' . gitconfig-mode) (/modules/.*/config\' . gitconfig-mode) (/\.git/config\' . gitconfig-mode) (/\.gitconfig\' . gitconfig-mode) (/git/attributes\' . gitattributes-mode) (/info/attributes\' . gitattributes-mode) (/\.gitattributes\' . gitattributes-mode) (\.\(?:xsl\|fo\)$ . xsl-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . latex-mode) (/LICENSE\' . text-mode) (\.log\' . text-mode) (rc\' . conf-mode) (\.\(?:hex\|nes\)\' . hexl-mode) (\.vue\' . web-mode))


** Org-noter

#+begin_src emacs-lisp :tangle t
(use-package org-noter
  :defer t
  :custom
  (org-noter-highlight-selected-text t)
  (org-noter-max-short-selected-text-length 5))
#+end_src

** Visual do org-mode

Fun√ß√£o para ajudar a escrever melhor. Retira o n√∫mero das linhas; aumenta a coluna; desliga autocomplete - company.

#+begin_src emacs-lisp

;;(defun amr-clean ()
  ;; (display-line-numbers-mode 0)
;;   (set-fill-column 110)
;;(set-window-margins (selected-window) 40 40)
;;   (setq left-margin-width 20)
  ;;                                                             (setq right-margin-width 10)
  ;; (company-mode -1))
;;(add-hook 'org-mode-hook 'amr-clean)


(use-package org-modern
  :ensure t
  :hook
  (org-mode . org-modern-mode)
  :custom
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-ellipsis "‚Ä¶")
  (org-modern-star '("ÔÑ∏" "ÔÜé" "‚çü" "‚ãÑ" "‚ú∏" "‚úø")))
#+end_src


#+begin_src emacs-lisp
(with-eval-after-load 'org (global-org-modern-mode))
#+end_src

*** Defini√ß√£o de palavras chave (TODO, etc)

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "READ(l)" "HOLD(h)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")))

(setq hl-todo-keyword-faces
      '(("TODO"   . "#00CC00")
        ("READ"  . "#00ACE6")
        ("HOLD"  . "#FFCC66")
        ("IDEA"  . "#CCCC00")
        ("DONE"  . "#CCCCCC")
        ("KILL"  . "#FF0000")))

#+end_src


** Burly

#+begin_src emacs-lisp
(use-package burly
  :ensure t)
#+end_src

** Abbrev

#+begin_src emacs-lisp
(setq abbrev-file-name
        "~/sync/pessoal/emacs/abbrev/.abbrev_defs.el")
#+end_src


** Org-Babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((plantuml . t)))
#+end_src


* Visual

#+begin_src emacs-lisp :tangle nil
;; (setq doom-theme 'doom-one)
;; (setq display-line-numbers-type t)
#+end_src

#+begin_src emacs-lisp
(use-package golden-ratio
  :ensure t)
#+end_src

** Nano

#+begin_src emacs-lisp :tangle t
(use-package nano-emacs
  :ensure t)
#+end_src

** Themes Lambda

#+begin_src emacs-lisp
(use-package lambda-themes
  :defer t
  :custom
  (lambda-themes-set-italic-comments t)
  (lambda-themes-set-italic-keywords t)
  (lambda-themes-set-variable-pitch t)
  :config
  ;; load preferred theme
  (load-theme 'lambda-dark-faded))
#+end_src

** Olivetti-mode

#+begin_src emacs-lisp :tangle no
(use-package olivetti
  :defer t)
#+end_src
#+begin_src emacs-lisp :tangle t


;;(set-face-attribute 'variable-pitch nil :font "Noto Sans")

#+end_src

#+begin_src emacs-lisp :tangle t

(use-package olivetti
  :ensure
  :defer
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode amr/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `amr/hidden-mode-line-mode').  The
default typeface is set to a proportionately-spaced family,
except for programming modes (see `amr/variable-pitch-mode').
The cursor becomes a blinking bar, per `amr/cursor-type-mode'."
    :init-value nil
    :global nil
    (if amr/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (amr/variable-pitch-mode 1)
          (amr/scroll-centre-cursor-mode 1)
          (amr/display-line-numbers-mode 0))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (amr/variable-pitch-mode -1)))
    :bind ("C-c p o" . amr/olivetti-mode))


  (use-package face-remap
    :diminish buffer-face-mode            ; the actual mode
    :commands amr/variable-pitch-mode
    :config
    (define-minor-mode amr/variable-pitch-mode
      "Toggle `variable-pitch-mode', except for `prog-mode'."
      :init-value nil
      :global nil
      (if amr/variable-pitch-mode
          (unless (derived-mode-p 'prog-mode)
            (variable-pitch-mode 1))
        (variable-pitch-mode -1))))


  (use-package emacs
    :config
    (setq-default scroll-preserve-screen-position t)
    (setq-default scroll-conservatively 1) ; affects `scroll-step'
    (setq-default scroll-margin 0)

    (define-minor-mode amr/scroll-centre-cursor-mode
      "Toggle centred cursor scrolling behaviour."
      :init-value nil
      :lighter " S="
      :global nil
      (if amr/scroll-centre-cursor-mode
          (setq-local scroll-margin (* (frame-height) 2)
                      scroll-conservatively 0
                      maximum-scroll-margin 0.5)
        (dolist (local '(scroll-preserve-screen-position
                         scroll-conservatively
                         maximum-scroll-margin
                         scroll-margin))
          (kill-local-variable `,local))))

    ;; C-c l is used for `org-store-link'.  The mnemonic for this is to
    ;; focus the Line and also works as a variant of C-l.
    :bind ("C-c p s" . amr/scroll-centre-cursor-mode))


  (use-package display-line-numbers
    :defer
    :config
    ;; Set absolute line numbers.  A value of "relative" is also useful.
    (setq display-line-numbers-type t)

    (define-minor-mode amr/display-line-numbers-mode
      "Toggle `display-line-numbers-mode' and `hl-line-mode'."
      :init-value nil
      :global nil
      (if amr/display-line-numbers-mode
          (progn
            (display-line-numbers-mode 1)
            (hl-line-mode 1))
        (display-line-numbers-mode -1)
        (hl-line-mode -1)))
    :bind ("C-c p l" . amr/display-line-numbers-mode))


#+end_src

#+RESULTS:
: amr/display-line-numbers-mode

* Ereader - Nov

#+begin_src emacs-lisp :tangle t
(use-package nov
  :defer t
  :hook
  (nov-mode . scroll-lock-mode))
#+end_src

* Org-Roam

#+begin_src emacs-lisp
(use-package org-roam
 :ensure t
 :init
 (setq org-roam-v2-ack t)
 (setq org-roam-mode-section-functions
       (list #'org-roam-backlinks-section
             #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section ))
 (add-to-list 'display-buffer-alist
              '("\\*org-roam\\*"
                (display-buffer-in-direction)
                (direction . right)
                (window-width . 0.33)
                (window-height . fit-window-to-buffer)))
 :custom
 (org-roam-directory "~/roam-notes")
 (org-roam-complete-everywhere t)
 (org-roam-capture-templates
  '(("d" "default" plain "%?"
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t))
    ("m" "main" plain
     (file "~/roam-notes/templates/main.org")
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t)
    ("n" "novo pensamento" plain
     (file "~/roam-notes/templates/pensa.org")
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t)
    ("b" "bibliografia" plain
     (file "~/roam-notes/templates/bib.org")
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t)
    ("p" "project" plain
     (file "~/roam-notes/templates/project.org")
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t))
 :bind (("C-c n l" . org-roam-buffer-toggle)
        ("C-c n f" . org-roam-node-find)
        ("C-c n i" . org-roam-node-insert)
        :map org-mode-map
        ("C-M-i" . completion-at-point))
 :config
  (org-roam-setup))
#+end_src

* Agenda

** Org-agenda

#+begin_src emacs-lisp
(setq org-agenda-span 1
      org-agenda-start-day "+0d"
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t)

;; Ricing org agenda
(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" ""))

(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t ")
 (todo . " %i %-12:c")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

(setq org-agenda-hide-tags-regexp ".*")

#+end_src


#+begin_src emacs-lisp :tangle no
(setq org-agenda-category-icon-alist
      `(("Teaching.p" ,(list (all-the-icons-faicon "graduation-cap" :height 0.8)) nil nil :ascent center)
        ("Family.s" ,(list (all-the-icons-faicon "home" :v-adjust 0.005)) nil nil :ascent center)
        ("Producer.p" ,(list (all-the-icons-faicon "youtube-play" :height 0.9)) nil nil :ascent center)
        ("Bard.p" ,(list (all-the-icons-faicon "music" :height 0.9)) nil nil :ascent center)
        ("Stories.s" ,(list (all-the-icons-faicon "book" :height 0.9)) nil nil :ascent center)
        ("Author.p" ,(list (all-the-icons-faicon "pencil" :height 0.9)) nil nil :ascent center)
        ("Gamedev.s" ,(list (all-the-icons-faicon "gamepad" :height 0.9)) nil nil :ascent center)
        ("Knowledge.p" ,(list (all-the-icons-faicon "database" :height 0.8)) nil nil :ascent center)
        ("Personal.p" ,(list (all-the-icons-material "person" :height 0.9)) nil nil :ascent center)))
#+end_src

#+begin_src emacs-lisp
;; Function to be run when org-agenda is opened
(defun org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  (olivetti-mode))

;; Adds hook to org agenda mode, making follow mode active in org agenda
(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)
#+end_src

** Org-super-agenda

#+begin_src emacs-lisp

;; org-super-agenda

(use-package org-super-agenda
  :after org
  :config
  (setq org-super-agenda-header-map nil) ;; takes over 'j'
  ;; (setq org-super-agenda-header-prefix " ‚ó¶‚Äâ") ;; There are some unicode "THIN SPACE"s after the ‚ó¶
  ;; Hide the thin width char glyph. This is dramatic but lets me not be annoyed
  (add-hook 'org-agenda-mode-hook
            #'(lambda () (setq-local nobreak-char-display nil)))
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "ÔÑ™ Overdue "  ; Optionally specify section name
                :scheduled past
                :order 2
                :face 'error)

         ;; (:name "Personal "
         ;;        :and(:file-path "Personal.p" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Family "
         ;;        :and(:file-path "Family.s" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Teaching "
         ;;        :and(:file-path "Teaching.p" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Gamedev "
         ;;        :and(:file-path "Gamedev.s" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Youtube "
         ;;        :and(:file-path "Producer.p" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Music "
         ;;        :and(:file-path "Bard.p" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Storywriting "
         ;;        :and(:file-path "Stories.s" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Writing "
         ;;        :and(:file-path "Author.p" :not (:tag "event"))
         ;;        :order 3)

         ;; (:name "Learning "
         ;;        :and(:file-path "Knowledge.p" :not (:tag "event"))
         ;;        :order 3)

          (:name "ÔÑ≥ Today "  ; Optionally specify section name
                :time-grid t
                :date today
                :scheduled today
                :order 1
                :face 'warning)))

(org-super-agenda-mode t))
#+end_src

** Org-ql

#+begin_src emacs-lisp :tangle no
(use-package org-ql
  :quelpa (org-ql :fetcher github :repo "alphapapa/org-ql"
            :files (:defaults (:exclude "helm-org-ql.el"))))
#+end_src

** NO Org-agenda-export

Verificar configuira√ß√£o em [[https://orgmode.org/manual/Exporting-Agenda-Views.html][Org-export-agenda-view]]

#+begin_src emacs-lisp :tangle no

(setq org-agenda-custom-commands
   '(("X" agenda "" nil ("~/org-agenda/agenda.html" "~/org-agenda/agenda.ps"))
        ("z" todo ""
         (
          ;;(org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS")
          (org-agenda-overriding-header "Lista TODO")
          (org-agenda-with-colors true)
          (org-agenda-remove-tags t)
          (ps-number-of-column 2)
          (ps-landscape-mode t)
          )
         ("~/org-agenda/todo.html" "~/org-agenda/todo.txt" "~/org-agenda/todo.ps"))
        ))

#+end_src

* Elfeed

#+begin_src emacs-lisp
(use-package elfeed-org
  :defer
  :config
  (setq rmh-elfeed-org-files (list "~/sync/pessoal/emacs/elfeed/elfeed.org"))
  (setq-default elfeed-search-filter "@4-week-ago +unread -news -blog -search"))

(use-package elfeed-goodies
  :ensure t
  :custom
  (elfeed-goodies/feed-source-column-width 36)
  (elfeed-goodies/tag-column-width 25))
#+end_src

* Blog

** HUGO

#+begin_src emacs-lisp
(with-eval-after-load 'ox
    (require 'ox-hugo))
#+end_src

** Capture template

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
      '(("b" "blog post" entry
         (file+headline "~/blog/blog.org" "NO New ideas")
         (file "~/sync/pessoal/emacs/org-capture-templates/post.org"))))
#+end_src

* Template

** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/sync/pessoal/emacs/snippets"))
  (yas-global-mode 1))
#+end_src

** Org-tempo

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* References & Bib

#+begin_src emacs-lisp
(setq org-cite-csl-styles-dir "~/Zotero/styles")
#+end_src

* Icons

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :ensure t
  :init (ivy-rich-mode 1))
#+end_src

* Latex

** Documents
#+begin_src emacs-lisp

(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("tuftebook"
                 "\\documentclass{tufte-book}\n
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; tufte-handout class for writing classy handouts and papers
  ;;(require 'org-latex)
  (add-to-list 'org-latex-classes
               '("tuftehandout"
                 "\\documentclass{tufte-handout}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  ;; Plain text
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))


#+end_src
**** PocketMod

#+begin_src emacs-lisp

(add-to-list 'org-latex-classes
               '("pocketmod"
                 "\\documentclass[fontsize=24pt,a4paper]{scrartcl}
\\usepackage[showmarks]{pocketmod}
\\usepackage[default]{lato}
\\usepackage[T1]{fontenc}
\\pagenumbering{gobble}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 ("\\pagebreak" . "\\pagebreak")))


#+end_src
** Export

#+begin_src emacs-lisp

(setq org-publish-project-alist
      '(
        ("notes"
         :base-directory "~/notes/"
         :base-extension "org"
         :publishing-directory "~/notes/export/"
         :publishing-function org-publish-org-to-latex
         :select-tags     ("@NOTES")
         :title "Notes"
         :include ("academic.org")
         :exclude "\\.org$"
         )))
#+end_src

* Projectile

Recomenda√ß√£o feita por Doom Doctor

#+begin_src emacs-lisp
(after! projectile
          (setq projectile-project-root-files-bottom-up
                (remove ".git" projectile-project-root-files-bottom-up)))

#+end_src

* NO Perspective

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :bind (
    :map perspective-map
      ("n" . nil)
      ("N" . persp-next)))

(add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src

* NO Python

** Pyenv setup

#+begin_src emacs-lisp :tangle no

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)


  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))
#+end_src

* Company completion

#+begin_src emacs-lisp
(use-package company
  :defer t
  :custom
  (company-minimum-prefix-length 3)
  (company-idle-delay 0.3))
#+end_src

* Email

#+begin_src emacs-lisp



#+end_src
